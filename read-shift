#! /usr/bin/env python3

"""Read the shift chosen for a particular slider in a diff.

usage:

    read-shift <old-sha1>:<old-filename> <new-sha1>:<new-filename> [-/+] <line-number>

where

* <sha1>:<filename> names a blob to be diffed.

* [-/+] is '-' if lines are being deleted, '+' if lines are being
  added.

* <line-number> is the line number of the first line being
  added/deleted, when the slider is shifted to its canonical position.
  The line number is relative to the old blob if lines are being
  deleted and relative to the new blob if lines are being added.

Output the shift chosen for that slider in a diff read from stdin.
Output the result to stdout as

    <old-sha1>:<old-filename> <new-sha1>:<new-filename> [-/+] <line-number> <shift>

"""

import sys
import os
import io
import re
import argparse

sys.path.insert(0, os.path.dirname(sys.argv[0]))

import diff_heuristics
from diff_heuristics import SliderName
from diff_heuristics import iter_file_diffs
from diff_heuristics import find_slider
from diff_heuristics import ParsingError


def main(args):
    parser = argparse.ArgumentParser(
        description='Read a slider shift from a diff'
        )
    parser.add_argument('old', type=str)
    parser.add_argument('new', type=str)
    parser.add_argument('prefix', type=str, choices=['-', '+'])
    parser.add_argument('line_number', type=int)
    parser.add_argument('--verbose', '-v', action='store_true')

    options = parser.parse_args(args)

    slidername = SliderName(
        options.old, options.new, options.prefix, options.line_number,
        )

    (old_sha1, old_filename) = slidername.old.split(':', 1)
    (new_sha1, new_filename) = slidername.new.split(':', 1)

    if options.verbose:
        diff_heuristics.verbose = True

    input = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8', errors='replace')
    lines = [line.rstrip('\n\r') for line in input.readlines()]
    try:
        slider = find_slider(
            lines,
            old_filename, new_filename,
            slidername.prefix, slidername.line_number,
            )
    except ParsingError as e:
        print(
            'Could not parse following slider: %s\n'
            '    %s' % (
                e, slidername,
                ),
            file=sys.stderr,
            )
    else:
        shift = slider.shift_canonically()
        slidername.write(sys.stdout, [shift])


if __name__ == '__main__':
    main(sys.argv[1:])
