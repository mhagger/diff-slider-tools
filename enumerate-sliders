#! /usr/bin/env python3

"""Find all of the slideable add/delete groups between commit pairs.

Read pairs

    <old-sha1>..<new-sha1>

from stdin. (Note that such input can be generated by a command like

    git log -10 --min-parents=1 --max-parents=1 --format='%P..%H' HEAD

.) Compute the diff between the two commits, and write any sliders
found to stdout as

    <old-sha1>:<old-filename> <new-sha1>:<new-filename> [-/+] <line-number>

where

* <sha1>:<filename> names a blobs to be diffed.

* [-/+] is '-' if lines are being deleted, '+' if lines are being
  added.

* <line-number> is the line number of the first line being
  added/deleted, when the slider is shifted to its canonical position.
  The line number is relative to the old blob if lines are being
  deleted and relative to the new blob if lines are being added.

"""

import sys
import os
import re
import argparse

sys.path.insert(0, os.path.dirname(sys.argv[0]))

import diff_heuristics
from diff_heuristics import SliderName
from diff_heuristics import iter_file_diffs
from diff_heuristics import compute_diff


INPUT_RE = re.compile(r'^(?P<old_sha1>[0-9a-f]{40})\.\.(?P<new_sha1>[0-9a-f]{40})$')

def main(args):
    parser = argparse.ArgumentParser(
        description='Enumerate slideable add/delete groups in a diff'
        )
    parser.add_argument('--repo', type=str, required=True)
    parser.add_argument('--verbose', '-v', action='store_true')

    options = parser.parse_args(args)

    if options.verbose:
        diff_heuristics.verbose = True

    for line in sys.stdin:
        line = line.rstrip()
        m = INPUT_RE.match(line)
        if not m:
            raise RuntimeError('invalid input: %r' % (line,))
        (old_sha1, new_sha1) = (m.group('old_sha1'), m.group('new_sha1'))

        if options.verbose:
            sys.stderr.write('Processing %s..%s\n' % (old_sha1, new_sha1))
        lines = compute_diff('corpus/%s.git' % (options.repo,), old_sha1, new_sha1)

        for file_diff in iter_file_diffs(lines):
            for hunk in file_diff.hunks:
                for slider in hunk.iter_sliders():
                    if len(slider.shift_range) > 1:
                        shift = slider.shift_canonically()
                        slidername = SliderName(
                            '%s:%s' % (old_sha1, file_diff.old_filename,),
                            '%s:%s' % (new_sha1, file_diff.new_filename,),
                            slider.prefix, slider.line_number,
                            )
                        slidername.write(sys.stdout, [shift])


if __name__ == '__main__':
    main(sys.argv[1:])
