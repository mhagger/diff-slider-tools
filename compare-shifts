#! /usr/bin/env python3

"""Compare various choices of shift for sliders.

usage:

    compare-shifts --repo=REPO [<c>=PATH...]

where each PATH is a *.sliders file with or without shifts, and <c> is
the character with which that file's shift will be presented. If PATH
is '-', read that column from stdin.

"""

import sys
import os
import io
import re
import argparse
from collections import OrderedDict

sys.path.insert(0, os.path.dirname(sys.argv[0]))

import diff_heuristics
from diff_heuristics import SliderName


def main(args):
    parser = argparse.ArgumentParser(
        description='Read a slider shift from a diff'
        )
    parser.add_argument('--repo', type=str, required=True)
    parser.add_argument(
        '--all', '-a', action='store_true',
        help='show all sliders',
        )
    parser.add_argument(
        '--any-wrong', action='store_true',
        help=(
            'show sliders for which the correct values are known '
            'and any shift disagrees with them'
            ),
        )
    parser.add_argument(
        '--any-nonzero', action='store_true',
        help='show sliders for which any shift differs from zero',
        )
    parser.add_argument(
        '--controversial', action='store_true',
        help=(
            'show sliders for which the correct values are not known '
            'and some shifts disagree with each other'
            )
        )
    parser.add_argument('--verbose', '-v', action='store_true')
    parser.add_argument('--correct', type=str)
    parser.add_argument('columns', nargs='+')

    options = parser.parse_args(args)

    if options.verbose:
        diff_heuristics.verbose = True

    column_names = []

    # A dict {(old, new, prefix, line_number) : {column_name : shift}}:
    all_shifts = OrderedDict()

    slider_intern = {}

    for column in options.columns:
        (column_name, path) = column.split('=', 1)
        column_names.append(column_name)
        if path == '-':
            source = SliderName.read(sys.stdin)
        elif not os.path.isfile(path):
            sys.stderr.write('Skipping non-existing file %r\n' % (path,))
            continue
        else:
            source = SliderName.read(open(path))

        for (slidername, shifts) in source:
            slidername = slider_intern.setdefault(slidername, slidername)
            all_shifts.setdefault(slidername, {})[column_name] = shifts

    del slider_intern

    differences = 0

    for (slidername, values) in all_shifts.items():
        columns = []
        shifts_seen = set()
        correct = None
        for column_name in column_names:
            shifts = values.get(column_name, [])

            if options.correct and column_name == options.correct:
                correct = set(shifts)
                for shift in shifts:
                    columns.append((column_name, shift))
            else:
                for shift in shifts:
                    columns.append((column_name, shift))
                    shifts_seen.add(shift)

        if (
                options.all
                or options.any_wrong and correct and shifts_seen - correct
                or options.any_nonzero and list(shifts_seen) != [0]
                or options.controversial and not correct and len(shifts_seen) != 1
                ):
            slider = slidername.compute_slider('corpus/%s.git' % (options.repo,))

            slidername.write(sys.stdout)
            print('# %s' % ('v' * 60,))
            slider.show_comparison(columns, line_prefix='# ')
            print('# %s' % ('^' * 60,))
            print('#')

            differences += 1

    if options.correct:
        print(
            'Number of incorrect shifts: %d' % (differences,),
            file=sys.stderr
            )


if __name__ == '__main__':
    main(sys.argv[1:])
