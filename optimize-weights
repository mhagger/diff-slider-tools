#! /usr/bin/env python3

"""Optimize the heuristic weights by testing against hand-generated data.

usage:

    optimize-weights OPTIONS <repo> ...

"""

import sys
import os
import argparse
import random

sys.path.insert(0, os.path.dirname(sys.argv[0]))

import diff_heuristics
from diff_heuristics import compute_diff
from diff_heuristics import find_slider
from diff_heuristics import iter_shifts
from diff_heuristics import SplitMeasurements
from diff_heuristics import SplitScorer
from diff_heuristics import SplitScorer2
from diff_heuristics import load_scores


def main(args):
    parser = argparse.ArgumentParser(
        description='Read a slider shift from a diff'
        )
    parser.add_argument(
        '--step', dest='steps', type=int, action='append',
        help='deltas to apply to parameters when perturbing them',
        )
    parser.add_argument(
        '--max-perturbations', type=int, default=1,
        help='the number of parameters to perturb at once'
        )
    parser.add_argument(
        '--vary', action='append',
        choices=SplitScorer2.get_parameter_names() + [
            name.replace('_', '-')
            for name in SplitScorer2.get_parameter_names()
            ],
        help='parameters that should be varied as part of the optimization',
        )
    parser.add_argument(
        '--freeze', action='append',
        choices=SplitScorer2.get_parameter_names() + [
            name.replace('_', '-')
            for name in SplitScorer2.get_parameter_names()
            ],
        help='parameters that should be frozen at their initial values',
        )
    parser.add_argument(
        '--iterations', type=int, default=1,
        help='the number of times to repeat the optimization step',
        )
    parser.add_argument(
        '--batch-limit', type=int, default=1000,
        help='the maximum number of scorers to test per iteration',
        )
    parser.add_argument(
        '--keep', type=int, default=20,
        help='the number of best scorers to perturb between iterations',
        )
    parser.add_argument(
        '--cull', metavar='delta', type=int, default=None,
        help=(
            'discard scorers whose score is more than DELTA worse '
            'than the best score seen so far'
            ),
        )
    parser.add_argument(
        '--load', action='append',
        help='load scores from these files before starting',
        )
    parser.add_argument(
        '--seed', type=int, default=20,
        help='seed the iteration with SEED of the best loaded scorers',
        )
    parser.add_argument(
        'repos', nargs='+',
        help='corpus repositories to use for testing',
        )
    parser.add_argument(
        '--verbose', '-v', action='store_true',
        help='increase verbosity',
        )
    SplitScorer2.add_arguments(parser)

    options = parser.parse_args(args)

    if options.verbose:
        diff_heuristics.verbose = True

    if not options.steps:
        options.steps = [-1, 1]

    if options.freeze and options.vary:
        parser.error('--freeze and --vary are incompatible')
    elif options.freeze:
        omit = set(name.replace('-', '_') for name in options.freeze)
        vary_parameters = [
            name
            for name in SplitScorer2.get_parameter_names()
            if not name in omit
            ]
    elif options.vary:
        vary_parameters = [name.replace('-', '_') for name in options.vary]
    else:
        vary_parameters = SplitScorer2.get_parameter_names()

    collected_scores = dict()

    if options.load:
        for filename in options.load:
            collected_scores.update(load_scores(filename))

    if collected_scores and options.seed:
        sorted_scorers = sorted(
            collected_scores,
            key=lambda scorer: (collected_scores[scorer],)
            )

        best_scorer = sorted_scorers[0]
        best_score = collected_scores[best_scorer]
        print('Best score so far: %d  %r' % (best_score, best_scorer,), file=sys.stderr)

        try:
            last = sorted_scorers[options.keep - 1]
        except IndexError:
            last = sorted_scorers[-1]

        threshold = collected_scores[last]
        base_scorers = [
            scorer
            for scorer in sorted_scorers
            if collected_scores[scorer] <= threshold
            ]
    else:
        base_scorers = [SplitScorer2.from_options(options)]
        best_score = None

    for iteration in range(options.iterations):
        scorers = set()
        for base_scorer in base_scorers:
            for scorer in base_scorer.iter_perturbed(
                    options.steps, vary_parameters=vary_parameters,
                    max_perturbations=options.max_perturbations,
                    ):
                if scorer not in collected_scores:
                    scorers.add(scorer)
        scorers = list(scorers)

        if len(scorers) == 0:
            break
        elif len(scorers) > options.batch_limit:
            scorers = random.sample(scorers, options.batch_limit)

        print(
            'Iteration %d: %d new scorers to test (%d tested already).' % (
                iteration, len(scorers), len(collected_scores)
                ),
            file=sys.stderr,
            )

        error_counts = dict((scorer, 0) for scorer in scorers)

        for repo in options.repos:
            with open('corpus/%s-human.sliders' % (repo,)) as f:
                for (old, new, prefix, line_number, shifts) in iter_shifts(f):
                    (old_sha1, old_filename) = old.split(':', 1)
                    (new_sha1, new_filename) = new.split(':', 1)
                    correct = set(shifts)

                    lines = compute_diff('corpus/%s.git' % (repo,), old, new)
                    try:
                        slider = find_slider(lines, old_filename, new_filename, prefix, line_number)
                    except diff_heuristics.ParsingError as e:
                        sys.stderr.write(
                            'Error parsing slider %s:%s %s:%s %s %d: %s\n' % (
                                old_sha1, old_filename,
                                new_sha1, new_filename,
                                prefix, line_number,
                                e,
                                )
                            )
                    else:
                        slider.shift_canonically()

                        i = 0
                        while i < len(scorers):
                            scorer = scorers[i]
                            shift = slider.find_best_shift(scorer)
                            if shift not in correct:
                                error_counts[scorer] += 1
                                if (
                                        options.cull is not None
                                        and best_score is not None
                                        and error_counts[scorer] > best_score + options.cull
                                        ):
                                    del error_counts[scorer]
                                    del scorers[i]
                                    collected_scores[scorer] = None
                                    sys.stderr.write('%d.' % (len(scorers),))
                                else:
                                    i += 1
                            else:
                                i += 1

                    sys.stderr.write('.')
                    sys.stderr.flush()
        sys.stderr.write('\n')

        if not scorers:
            break

        sorted_scorers = sorted(
            scorers,
            key=lambda scorer: (error_counts[scorer], repr(scorer))
            )

        best_scorer = sorted_scorers[0]
        error_count = error_counts[best_scorer]
        if best_score is None or error_count < best_score:
            best_score = error_count
        print('Best: %d  %r' % (error_count, best_scorer,), file=sys.stderr)
        print('Best score so far: %d' % (best_score,), file=sys.stderr)

        for scorer in sorted_scorers:
            error_count = error_counts[scorer]
            print('%4d  %r' % (error_count, scorer,))
            collected_scores[scorer] = error_count

        sys.stdout.flush()

        try:
            last = sorted_scorers[options.keep - 1]
        except IndexError:
            last = sorted_scorers[-1]

        threshold = error_counts[last]
        base_scorers = [
            scorer
            for scorer in sorted_scorers
            if error_counts[scorer] <= threshold
            ]


if __name__ == '__main__':
    main(sys.argv[1:])
