#! /usr/bin/env python3

"""Choose the 'best' shift for a particular slider.

usage:

    improve-slider --repo=<PATH> [--verbose]

To stdin should be written one or more sliders to be processed, in the
following format:

    <old-sha1>:<old-filename> <new-sha1>:<new-filename> [-/+] <line-number> [<shift>...]

where

* <sha1>:<filename> names a blob to be diffed.

* [-/+] is '-' if lines are being deleted, '+' if lines are being
  added.

* <line-number> is the line number of the first line being
  added/deleted, when the slider is shifted to its canonical position.
  The line number is relative to the old blob if lines are being
  deleted and relative to the new blob if lines are being added.

* <shift> can be integers. These are ignored.

Write the results to stdout in the same format as the input, where
<shift> is the preferred shift.

"""

import sys
import os
import io
import re
import argparse

sys.path.insert(0, os.path.dirname(sys.argv[0]))

import diff_heuristics
from diff_heuristics import compute_diff
from diff_heuristics import find_slider
from diff_heuristics import iter_shifts
from diff_heuristics import SplitScorer


INPUT_RE = re.compile(r'^(?P<old_sha1>[0-9a-f]{40})\.\.(?P<new_sha1>[0-9a-f]{40})$')

def main(args):
    parser = argparse.ArgumentParser(
        description='Read a slider shift from a diff'
        )
    parser.add_argument('--repo', type=str, required=True)
    parser.add_argument('--verbose', '-v', action='store_true')
    SplitScorer.add_arguments(parser)

    options = parser.parse_args(args)

    if options.verbose:
        diff_heuristics.verbose = True

    scorer = SplitScorer.from_options(options)

    for (old, new, prefix, line_number, shifts) in iter_shifts(sys.stdin):
        (old_sha1, old_filename) = old.split(':', 1)
        (new_sha1, new_filename) = new.split(':', 1)

        lines = compute_diff(options.repo, old, new)
        try:
            slider = find_slider(lines, old_filename, new_filename, prefix, line_number)
        except diff_heuristics.ParsingError as e:
            sys.stderr.write(
                'Error parsing slider %s:%s %s:%s %s %d: %s\n' % (
                    old_sha1, old_filename,
                    new_sha1, new_filename,
                    prefix, line_number,
                    e,
                    )
                )
        else:
            slider.shift_canonically()

            print(
                '%s:%s %s:%s %s %d %d' % (
                    old_sha1, old_filename,
                    new_sha1, new_filename,
                    slider.prefix, slider.line_number,
                    slider.find_best_shift(scorer),
                    )
                )


if __name__ == '__main__':
    main(sys.argv[1:])
